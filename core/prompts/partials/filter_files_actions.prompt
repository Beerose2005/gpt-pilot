Here is the current relevant files list:
{% if relevant_files %}{{ relevant_files }}{% else %}[]{% endif %}

Now, with multiple iterations you have to find relevant files for the current task. Here are the actions that you can use:
- `read_files` - List of files that you want to read.
- `add_files` - Add file to the list of relevant files.
- `remove_files` - Remove file from the list of relevant files.
- `finished` - Boolean that you will use when you finish with finding relevant files.

IMPORTANT:
# Make sure to follow these rules:
- All files that you want to read or add to the list of relevant files, must exist in the project. Do not ask to read or add file that does not exist! In the first message you have list of all files that currently exist in the project.
- Do not repeat same action for same file that you have already done. For example if you already added "server.js" to the list of relevant files you must not add "server.js" again.
- You must read the file before adding it to the list of relevant files. Do not add that you didn't read and see the content of the file.
{% if state.current_task %}- Focus only on your current task `{{ state.current_task.description }}` when selecting relevant files.{% endif %}
{% if not state.has_frontend() %}- IMPORTANT: You must read and add relevant files from both "client/" and "server/" folders so that implementation can be done correctly! The "client" and "server" must work seamlessly together!{% endif %}
- IMPORTANT: Execute only 1 action per request! Once your response is processed you will be able to choose next action.
- IMPORTANT: It is much better to read and add more files than not adding files that are relevant!
- If there is even a slight chance a file is relevant, you should read it. Make sure to read files in client/src/pages folder that could be relevant.
- Read as many files as possible. You can read and add up to 20 files at once and if you need to see more file contents you can do that in next iterations. Make sure you don't miss any files that are relevant!
